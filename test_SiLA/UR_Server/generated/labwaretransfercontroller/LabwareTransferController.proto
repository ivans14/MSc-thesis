syntax = "proto3";

import "SiLAFramework.proto";

package sila2.org.silastandard.core.labwaretransfercontroller.v1;

/* The Labware Transfer Controller feature provides commands to trigger the sub tasks of handing over a labware item, e.g. a microtiter plate, from one device to another in a standardized and generic way. For each transfer a defined sequence of commands has to be called on both involved devices, to ensure the proper synchronization of all necessary transfer actions without unwanted physical interferences and to optimize the transfer performance regarding the execution time. Using the generic commands labware transfers between any arbitrary labware handling devices can be controlled (a robot device has not necessarily be involved). A labware transfer is executed between a source and a destination device, where one of them is the active device (executing the actual handover actions) and the other one is the passive device. The sequence of issued commands is as follows: - Prior to the actual labware transfer a PrepareForOutput command is sent to the source device to execute all necessary actions to be ready to release a labware item (e.g. open a tray) and simultaneously a PrepareForInput command is sent to the destination device to execute all necessary actions to be ready to receive a labware item (e.g. position the robotic arm near the tray of the source device). Once, both devices have successfully finished their PrepareFor.. command execution, the next commands are issued. - If the source device is the active device it will receive a PutLabware command to execute all necessary actions to put the labware item to the destination device. After the transfer has been finished successfully the destination device receives a LabwareDelivered command, that triggers all actions to be done after the labware item has been transferred (e.g. close the opened tray). - If the destination device is the active device it will receive a GetLabware command to execute all necessary actions to get the labware from the source device (e.g. gripping the labware item). After that command has been finished successfully the source device receives a LabwareRemoved command, that triggers all actions to be done after the labware item has been transferred (e.g. close the opened tray). The command sequences for the involved devices with their respective roles have always to be as follows: - for an active source device: PrepareForOutput - PutLabware. - for a passive source device: PrepareForOutput - LabwareRemoved. - for an active destination device: PrepareForInput - GetLabware. - for a passive destination device: PrepareForInput - LabwareDelivered. If the commands issued by the client differ from the respective command sequences a InvalidCommandSequence error will be raised. To address the location, where a labware item can be handed over to or from other devices, every device must number its positions (handover positions). A robot usually has got at least one handover position for each other device it is interacting with, whereas the most none-transport devices will have only one handover position. In case of a position array (e.g. a rack) the position within the array is specified via the sub position of the handover position. To address the positions within a device (e.g. an incubator) where the transferred labware item has to be stored or is to be taken from, the internal position can be specified. All position information will be passed to the respective commands as index numbers. With the PrepareForInput command also information about the labware, like labware type or a unique labware identifier (e.g. a barcode), is transferred. The IntermediateActions parameter of the PutLabware and GetLabware command can be used to specify commands that have to be executed while a labware item is transferred to avoid unnecessary movements, e.g. if a robot has to get a plate from a just opened tray and a lid has to be put on the plate before it will be gripped, the lid handling actions have to be included in the GetLabware actions. The property AvailableIntermediateActions returns a list of commands that can be included in a PutLabware or GetLabware command. */
service LabwareTransferController {
  /* Put the device into a state where it is ready to accept new labware at the specified handover position. */
  rpc PrepareForInput (sila2.org.silastandard.core.labwaretransfercontroller.v1.PrepareForInput_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of PrepareForInput */
  rpc PrepareForInput_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of PrepareForInput */
  rpc PrepareForInput_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.PrepareForInput_Responses) {}
  /* Put the device into a state where it is ready to release the labware at the specified handover position. */
  rpc PrepareForOutput (sila2.org.silastandard.core.labwaretransfercontroller.v1.PrepareForOutput_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of PrepareForOutput */
  rpc PrepareForOutput_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of PrepareForOutput */
  rpc PrepareForOutput_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.PrepareForOutput_Responses) {}
  /* Place the currently processed labware item at the specified handover position (sent to the active source device after a "PrepareForOutput" command). */
  rpc PutLabware (sila2.org.silastandard.core.labwaretransfercontroller.v1.PutLabware_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of PutLabware */
  rpc PutLabware_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of PutLabware */
  rpc PutLabware_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.PutLabware_Responses) {}
  /* Retrieve a labware item from the specified handover position (sent to the active destination device after a "PrepareForInput" command). */
  rpc GetLabware (sila2.org.silastandard.core.labwaretransfercontroller.v1.GetLabware_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of GetLabware */
  rpc GetLabware_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of GetLabware */
  rpc GetLabware_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.GetLabware_Responses) {}
  /* Notifies the passive destination device of a labware item that has been transferred to it (sent after a "PrepareForInput" command). */
  rpc LabwareDelivered (sila2.org.silastandard.core.labwaretransfercontroller.v1.LabwareDelivered_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of LabwareDelivered */
  rpc LabwareDelivered_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of LabwareDelivered */
  rpc LabwareDelivered_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.LabwareDelivered_Responses) {}
  /* Notifies the passive source device of a labware item that has been removed from it (sent after a "PrepareForOutput" command). */
  rpc LabwareRemoved (sila2.org.silastandard.core.labwaretransfercontroller.v1.LabwareRemoved_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
  /* Monitor the state of LabwareRemoved */
  rpc LabwareRemoved_Info (sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
  /* Retrieve result of LabwareRemoved */
  rpc LabwareRemoved_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.LabwareRemoved_Responses) {}
  /* Returns all commands that can be be executed within a PutLabware or GetLabware command execution. */
  rpc Get_AvailableIntermediateActions (sila2.org.silastandard.core.labwaretransfercontroller.v1.Get_AvailableIntermediateActions_Parameters) returns (sila2.org.silastandard.core.labwaretransfercontroller.v1.Get_AvailableIntermediateActions_Responses) {}
}

/* Specifies one of the possible positions of a device where labware items can be handed over. Can contain a sub position, e.g. for specifying a position in a rack. */
message DataType_HandoverPosition {
  message HandoverPosition_Struct {
    sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_PositionIndex Position = 1;  /* The index of the general handover position, if more then one is available (else 1). */
    sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_PositionIndex SubPosition = 2;  /* The index of a sub position within a handover position, e.g. for a rack. */
  }
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition.HandoverPosition_Struct HandoverPosition = 1;  /* Specifies one of the possible positions of a device where labware items can be handed over. Can contain a sub position, e.g. for specifying a position in a rack. */
}

/* Specifies a position via an index number, starting with 1. */
message DataType_PositionIndex {
  sila2.org.silastandard.Integer PositionIndex = 1;  /* Specifies a position via an index number, starting with 1. */
}

/* Parameters for PrepareForInput */
message PrepareForInput_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position where the labware will be handed over. */
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_PositionIndex InternalPosition = 2;  /* Indicates the position where the labware will stored at inside the device, e.g. a storage position within an incubator. */
  sila2.org.silastandard.String LabwareType = 3;  /* Specifies the type of the labware that will be handed over to transfer information about the labware that the device might need to access it correctly. */
  sila2.org.silastandard.String LabwareUniqueID = 4;  /* The labwareUniqueID represents the unique identification of a labware in the controlling system. It is assigned by the system and stays the same for the whole process. */
}

/* Responses of PrepareForInput */
message PrepareForInput_Responses {
}

/* Parameters for PrepareForOutput */
message PrepareForOutput_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position where the labware will be handed over. */
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_PositionIndex InternalPosition = 2;  /* Indicates the position where the labware will be retrieved from inside the device, e.g. a storage position within an incubator. */
}

/* Responses of PrepareForOutput */
message PrepareForOutput_Responses {
}

/* Parameters for PutLabware */
message PutLabware_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position where the labware will be moved to. */
  sila2.org.silastandard.String LabwareType = 2;  /* Specifies the type of the labware that will be handed over to transfer information about the labware that the device might need to access it correctly. */
  repeated sila2.org.silastandard.String IntermediateActions = 3;  /* Specifies one ore more commands that have to be executed within the command sequence (e.g. removing a lid). Each entry must be one of the commands returned by the AvailableIntermediateCommandExecutions property. */
}

/* Responses of PutLabware */
message PutLabware_Responses {
}

/* Parameters for GetLabware */
message GetLabware_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position where the labware will be retrieved from. */
  sila2.org.silastandard.String LabwareType = 2;  /* Specifies the type of the labware that will be handed over to transfer information about the labware that the device might need to access it correctly. */
  repeated sila2.org.silastandard.String IntermediateActions = 3;  /* Specifies one ore more commands that have to be executed within the command sequence (e.g. removing a lid). Each entry must be one of the commands returned by the AvailableIntermediateCommandExecutions property. */
}

/* Responses of GetLabware */
message GetLabware_Responses {
}

/* Parameters for LabwareDelivered */
message LabwareDelivered_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position the labware item has been delivered to. */
}

/* Responses of LabwareDelivered */
message LabwareDelivered_Responses {
}

/* Parameters for LabwareRemoved */
message LabwareRemoved_Parameters {
  sila2.org.silastandard.core.labwaretransfercontroller.v1.DataType_HandoverPosition HandoverPosition = 1;  /* Indicates the position the labware has been removed from. */
}

/* Responses of LabwareRemoved */
message LabwareRemoved_Responses {
}

/* Parameters for AvailableIntermediateActions */
message Get_AvailableIntermediateActions_Parameters {
}

/* Responses of AvailableIntermediateActions */
message Get_AvailableIntermediateActions_Responses {
  repeated sila2.org.silastandard.String AvailableIntermediateActions = 1;  /* Returns all commands that can be be executed within a PutLabware or GetLabware command execution. */
}
