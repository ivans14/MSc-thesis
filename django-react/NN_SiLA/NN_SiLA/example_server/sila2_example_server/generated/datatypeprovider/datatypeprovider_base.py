# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Any

from sila2.server import FeatureImplementationBase, MetadataDict

from .datatypeprovider_types import ComplexCommand_Responses, IntegerAlias, StructureType

if TYPE_CHECKING:
    from ...server import Server


class DataTypeProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """
        Defines commands and properties to showcase handling of different data types
        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_StructureProperty(self, *, metadata: MetadataDict) -> Any:
        """
        A structure property

        :param metadata: The SiLA Client Metadata attached to the call
        :return: A structure property
        """
        pass

    @abstractmethod
    def ComplexCommand(
        self, Number: IntegerAlias, Structure: StructureType, *, metadata: MetadataDict
    ) -> ComplexCommand_Responses:
        """
        A command with complex data types


        :param Number: An aliased integer

        :param Structure: The structure type

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - StructureType: The structure type

            - InlineStructure: A structure defined in the response element


        """
        pass
