# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

import datetime
import time
from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.timerprovider import (
    Countdown_IntermediateResponses,
    Countdown_Responses,
    CountdownTooLong,
    TimerProviderBase,
)

if TYPE_CHECKING:
    from ..server import Server


class TimerProviderImpl(TimerProviderBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        self.run_periodically(
            lambda: self.update_CurrentTime(datetime.datetime.now(tz=datetime.timezone.utc).timetz()), delay_seconds=1
        )

    def Countdown(
        self,
        N: int,
        Message: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Countdown_IntermediateResponses],
    ) -> Countdown_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        instance.progress = 0
        instance.estimated_remaining_time = datetime.timedelta(seconds=N)

        if N > 9000:
            raise CountdownTooLong

        for i in range(N, 0, -1):
            instance.send_intermediate_response(Countdown_IntermediateResponses(i))
            instance.progress = (N - i) / N
            instance.estimated_remaining_time = datetime.timedelta(seconds=i)

            time.sleep(1)

        return Countdown_Responses(Message, datetime.datetime.now(tz=datetime.timezone.utc))
