# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

import datetime
from typing import TYPE_CHECKING, Any

from sila2.framework import SilaDateType
from sila2.server import MetadataDict

from ..generated.datatypeprovider import ComplexCommand_Responses, DataTypeProviderBase, IntegerAlias, StructureType

if TYPE_CHECKING:
    from ..server import Server


class DataTypeProviderImpl(DataTypeProviderBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def get_StructureProperty(self, *, metadata: MetadataDict) -> Any:
        return b"abc", [SilaDateType(datetime.date.today(), datetime.timezone.utc)]

    def ComplexCommand(
        self, Number: IntegerAlias, Structure: StructureType, *, metadata: MetadataDict
    ) -> ComplexCommand_Responses:
        assert isinstance(Number, int)

        assert isinstance(Structure, tuple)
        assert len(Structure) == 2
        l, b = Structure
        assert l is Structure.ListOfStrings
        assert b is Structure.Boolean

        assert isinstance(l, list)
        assert all(isinstance(item, str) for item in l)
        assert isinstance(b, bool)

        return ComplexCommand_Responses((["a", "b", "c"], True), ("abc", 1.234))
