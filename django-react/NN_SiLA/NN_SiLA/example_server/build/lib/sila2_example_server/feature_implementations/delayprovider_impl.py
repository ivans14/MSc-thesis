# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

import random
import time
from typing import TYPE_CHECKING, Any, List, Union

from sila2.framework import Command, Feature, FullyQualifiedIdentifier, Property
from sila2.server import MetadataDict, MetadataInterceptor

from ..generated.delayprovider import DelayProviderBase, DelayProviderFeature, DelayTooLong

if TYPE_CHECKING:
    from ..server import Server


class DelayProviderImpl(DelayProviderBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        self.parent_server.add_metadata_interceptor(DelayProviderInterceptor())

    def get_RandomNumber(self, *, metadata: MetadataDict) -> int:
        return random.randint(0, 100)

    def get_calls_affected_by_Delay(self) -> List[Union[Feature, Command, Property, FullyQualifiedIdentifier]]:
        return [DelayProviderFeature["RandomNumber"]]


class DelayProviderInterceptor(MetadataInterceptor):
    max_delay_milliseconds: int = 10_000

    def __init__(self):
        super().__init__([DelayProviderFeature["Delay"]])

    def intercept(self, parameters: Any, metadata: MetadataDict, target_call: FullyQualifiedIdentifier) -> None:
        delay: int = metadata[DelayProviderFeature["Delay"]]
        if delay > self.max_delay_milliseconds:
            raise DelayTooLong(f"Maximum delay is {self.max_delay_milliseconds}, got {delay}")

        time.sleep(delay / 1000)
