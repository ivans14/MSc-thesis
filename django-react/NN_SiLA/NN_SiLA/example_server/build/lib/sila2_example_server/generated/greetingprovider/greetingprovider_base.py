# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING

from sila2.server import FeatureImplementationBase, MetadataDict

from .greetingprovider_types import SayHello_Responses

if TYPE_CHECKING:
    from ...server import Server


class GreetingProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """
            Example implementation of a minimum Feature. Provides a Greeting to the Client
        and a StartYear property, informing about the year the Server has been started.
        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_StartYear(self, *, metadata: MetadataDict) -> int:
        """
        Returns the year the SiLA Server has been started in.

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Returns the year the SiLA Server has been started in.
        """
        pass

    @abstractmethod
    def SayHello(self, Name: str, *, metadata: MetadataDict) -> SayHello_Responses:
        """
        Does what it says: returns "Hello SiLA 2 + [Name]" to the client.


        :param Name: The name, SayHello shall use to greet.

        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Greeting: The greeting string, returned to the SiLA Client.


        """
        pass
