# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, List, Union

from sila2.framework import Command, Feature, FullyQualifiedIdentifier, Property
from sila2.server import FeatureImplementationBase, MetadataDict

if TYPE_CHECKING:
    from ...server import Server


class DelayProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    def __init__(self, parent_server: Server):
        """
        Allows adding delay to calls via SiLA Client Metadata
        """
        super().__init__(parent_server=parent_server)

    @abstractmethod
    def get_RandomNumber(self, *, metadata: MetadataDict) -> int:
        """
        A random number

        :param metadata: The SiLA Client Metadata attached to the call
        :return: A random number
        """
        pass

    @abstractmethod
    def get_calls_affected_by_Delay(self) -> List[Union[Feature, Command, Property, FullyQualifiedIdentifier]]:
        """
          Returns the fully qualified identifiers of all features, commands and properties affected by the
          SiLA Client Metadata 'Delay'.

          **Description of 'Delay'**:
          When receiving this metadata in the context of a call, the server should wait for the specified duration
        before staring the requested execution

          :return: Fully qualified identifiers of all features, commands and properties affected by the
              SiLA Client Metadata 'Delay'.
        """
        pass
