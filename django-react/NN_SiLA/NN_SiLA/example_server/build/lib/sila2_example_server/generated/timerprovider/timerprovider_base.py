# Generated by sila2.code_generator; sila2.__version__: 0.9.2
from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import time
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .timerprovider_types import Countdown_IntermediateResponses, Countdown_Responses

if TYPE_CHECKING:
    from ...server import Server


class TimerProviderBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _CurrentTime_producer_queue: Queue[Union[time, Exception]]
    _CurrentTime_current_value: time

    def __init__(self, parent_server: Server):
        """
        Provides a timer command and the current time
        """
        super().__init__(parent_server=parent_server)

        self._CurrentTime_producer_queue = Queue()

    def update_CurrentTime(self, CurrentTime: time, queue: Optional[Queue[time]] = None) -> None:
        """
        The current time

        This method updates the observable property 'CurrentTime'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTime_producer_queue
        queue.put(CurrentTime)
        self._CurrentTime_current_value = CurrentTime

    def CurrentTime_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[time]]:
        """
        The current time

        This method is called when a client subscribes to the observable property 'CurrentTime'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_CurrentTime_subscriptions(self, error: Exception, queue: Optional[Queue[time]] = None) -> None:
        """
        The current time

        This method aborts subscriptions to the observable property 'CurrentTime'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._CurrentTime_producer_queue
        queue.put(error)

    @property
    def current_CurrentTime(self) -> time:
        try:
            return self._CurrentTime_current_value
        except AttributeError:
            raise AttributeError("Observable property CurrentTime has never been set")

    @abstractmethod
    def Countdown(
        self,
        N: int,
        Message: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[Countdown_IntermediateResponses],
    ) -> Countdown_Responses:
        """
        Count down from N to 0, then return the given message and the current time


        :param N: The number from which to count down

        :param Message: The message to return on completion

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - Message: The message provided as parameter

            - Timestamp: The timestamp when the countdown finished


        """
        pass
