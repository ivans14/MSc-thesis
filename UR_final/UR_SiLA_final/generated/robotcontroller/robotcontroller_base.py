# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from .robotcontroller_types import (
    ConfigureDecapProgram_IntermediateResponses,
    ConfigureDecapProgram_Responses,
    ConfigureMainProgram_IntermediateResponses,
    ConfigureMainProgram_Responses,
)

if TYPE_CHECKING:
    from ...server import Server


class RobotControllerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _ConnectionStatus_producer_queue: Queue[Union[bool, Exception]]
    _ConnectionStatus_current_value: bool

    def __init__(self, parent_server: Server):
        """
          The Robot Controller feature provides commands to trigger
        the execution of the Penny Robot.

        """
        super().__init__(parent_server=parent_server)

        self._ConnectionStatus_producer_queue = Queue()

    def update_ConnectionStatus(self, ConnectionStatus: bool, queue: Optional[Queue[bool]] = None) -> None:
        """
        Gets the connection status of the UR Robot

        This method updates the observable property 'ConnectionStatus'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._ConnectionStatus_producer_queue
            self._ConnectionStatus_current_value = ConnectionStatus
        queue.put(ConnectionStatus)

    def ConnectionStatus_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[bool]]:
        """
        Gets the connection status of the UR Robot

        This method is called when a client subscribes to the observable property 'ConnectionStatus'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_ConnectionStatus_subscriptions(self, error: Exception, queue: Optional[Queue[bool]] = None) -> None:
        """
        Gets the connection status of the UR Robot

        This method aborts subscriptions to the observable property 'ConnectionStatus'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._ConnectionStatus_producer_queue
        queue.put(error)

    @property
    def current_ConnectionStatus(self) -> bool:
        try:
            return self._ConnectionStatus_current_value
        except AttributeError:
            raise AttributeError("Observable property ConnectionStatus has never been set")

    @abstractmethod
    def ConfigureMainProgram(
        self,
        SyrSamp: int,
        SyrBatch: int,
        LPenSamp: int,
        LPenBatch: int,
        SPenSamp: int,
        SPenBatch: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ConfigureMainProgram_IntermediateResponses],
    ) -> ConfigureMainProgram_Responses:
        """
        Set the parameters for Penny program


        :param SyrSamp: Sets the number of syringe samples

        :param SyrBatch: Sets the number of syringe batches

        :param LPenSamp: Sets the number of large penfill samples

        :param LPenBatch: Sets the number of large penfill batches

        :param SPenSamp: Sets the number of small penfill samples

        :param SPenBatch: Sets the number of small penfill batches

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - ConfigureProgramResponse: Returns the response from the program.



        """
        pass

    @abstractmethod
    def ConfigureDecapProgram(
        self,
        LPenSamp: int,
        SPenSamp: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ConfigureDecapProgram_IntermediateResponses],
    ) -> ConfigureDecapProgram_Responses:
        """
        Set the parameters for Penny program


        :param LPenSamp: Sets the number of large penfill samples

        :param SPenSamp: Sets the number of small penfill samples

        :param metadata: The SiLA Client Metadata attached to the call
        :param instance: The command instance, enabling sending status updates to subscribed clients

        :return:

            - ConfigureProgramResponse: Returns the response from the program.



        """
        pass
