# Generated by sila2.code_generator; sila2.__version__: 0.10.1
# -----
# This class does not do anything useful at runtime. Its only purpose is to provide type annotations.
# Since sphinx does not support .pyi files (yet?), so this is a .py file.
# -----

from __future__ import annotations

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from typing import Iterable, Optional

    from robotcontroller_types import (
        ConfigureDecapProgram_IntermediateResponses,
        ConfigureDecapProgram_Responses,
        ConfigureMainProgram_IntermediateResponses,
        ConfigureMainProgram_Responses,
    )
    from sila2.client import (
        ClientMetadataInstance,
        ClientObservableCommandInstanceWithIntermediateResponses,
        ClientObservableProperty,
    )


class RobotControllerClient:
    """
    The Robot Controller feature provides commands to trigger
      the execution of the Penny Robot.

    """

    ConnectionStatus: ClientObservableProperty[bool]
    """
    Gets the connection status of the UR Robot
    """

    def ConfigureMainProgram(
        self,
        SyrSamp: int,
        SyrBatch: int,
        LPenSamp: int,
        LPenBatch: int,
        SPenSamp: int,
        SPenBatch: int,
        *,
        metadata: Optional[Iterable[ClientMetadataInstance]] = None,
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[
        ConfigureMainProgram_IntermediateResponses, ConfigureMainProgram_Responses
    ]:
        """
        Set the parameters for Penny program
        """
        ...

    def ConfigureDecapProgram(
        self, LPenSamp: int, SPenSamp: int, *, metadata: Optional[Iterable[ClientMetadataInstance]] = None
    ) -> ClientObservableCommandInstanceWithIntermediateResponses[
        ConfigureDecapProgram_IntermediateResponses, ConfigureDecapProgram_Responses
    ]:
        """
        Set the parameters for Penny program
        """
        ...
