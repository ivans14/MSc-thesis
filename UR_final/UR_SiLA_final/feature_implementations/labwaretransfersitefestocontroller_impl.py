# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING, List

from sila2.server import MetadataDict, ObservableCommandInstance

from ..generated.labwaretransfersitefestocontroller import (
    HandoverPosition,
    LabwareDelivered_Responses,
    LabwareRemoved_Responses,
    LabwareTransferSiteFestoControllerBase,
    PositionIndex,
    PrepareForInput_Responses,
    PrepareForOutput_Responses,
)

from ..UR_test_env2.UR_Arm import UR_Robot

if TYPE_CHECKING:
    from ..server import Server


class LabwareTransferSiteFestoControllerImpl(LabwareTransferSiteFestoControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        # self.robot_interface = UR_Robot('192.168.0.30')

    def get_AvailableHandoverPositions(self, *, metadata: MetadataDict) -> List[HandoverPosition]:
        return [("position",i) for i in range(1,28)]

    def get_NumberOfInternalPositions(self, *, metadata: MetadataDict) -> int:
        return 2

    def PrepareForInput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        LabwareType: str,
        LabwareUniqueID: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForInput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.prepare_for_input_festo()
        print("what")

    def PrepareForOutput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForOutput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.prepare_for_output_festo(InternalPosition)

    def LabwareDelivered(
        self, HandoverPosition: HandoverPosition, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> LabwareDelivered_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        print("labware delivered to passive destination device (Festo actuator)")
        return True

    def LabwareRemoved(
        self, HandoverPosition: HandoverPosition, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> LabwareRemoved_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        print("labware removed from passive source device (Festo actuator)")
        return True
