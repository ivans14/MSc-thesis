# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.robotcontroller import (
    ConfigureDecapProgram_IntermediateResponses,
    ConfigureDecapProgram_Responses,
    ConfigureMainProgram_IntermediateResponses,
    ConfigureMainProgram_Responses,
    RobotControllerBase,
    InvalidParameters
)

if TYPE_CHECKING:
    from ..server import Server


class RobotControllerImpl(RobotControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        # self.robot_interface = UR_Robot('192.168.0.30',parent_server)

    def ConfigureMainProgram(
        self,
        SyrSamp: int,
        SyrBatch: int,
        LPenSamp: int,
        LPenBatch: int,
        SPenSamp: int,
        SPenBatch: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ConfigureMainProgram_IntermediateResponses],
    ) -> ConfigureMainProgram_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        response = self.parent_server.robot_interface.run_program(SyrSamp, SyrBatch, LPenSamp,
        LPenBatch, SPenSamp, SPenBatch)
        if response == False:
            raise InvalidParameters
        return ConfigureMainProgram_Responses("program finished successfully")

    def ConfigureDecapProgram(
        self,
        LPenSamp: int,
        SPenSamp: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ConfigureDecapProgram_IntermediateResponses],
    ) -> ConfigureDecapProgram_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        response = self.parent_server.robot_interface.run_decapping(LPenSamp, SPenSamp)
        if response == False:
            raise InvalidParameters
        return ConfigureDecapProgram_Responses("program finished successfully")
        