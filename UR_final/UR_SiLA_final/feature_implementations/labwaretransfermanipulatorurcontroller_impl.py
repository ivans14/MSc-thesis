# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING, List

from sila2.server import MetadataDict, ObservableCommandInstance

from ..generated.labwaretransfermanipulatorurcontroller import (
    GetLabware_Responses,
    HandoverPosition,
    LabwareTransferManipulatorURControllerBase,
    PositionIndex,
    PrepareForInput_Responses,
    PrepareForOutput_Responses,
    PutLabware_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


class LabwareTransferManipulatorURControllerImpl(LabwareTransferManipulatorURControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def get_AvailableHandoverPositions(self, *, metadata: MetadataDict) -> List[HandoverPosition]:
        return [("position",i) for i in range(1,28)]


    def get_NumberOfInternalPositions(self, *, metadata: MetadataDict) -> int:
        return 1

    def get_AvailableIntermediateActions(self, *, metadata: MetadataDict) -> List[str]:
        raise NotImplementedError  # TODO

    def PrepareForInput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        LabwareType: str,
        LabwareUniqueID: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForInput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.prepare_for_input_UR(HandoverPosition[1])

    def PrepareForOutput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForOutput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.prepare_for_output_UR(HandoverPosition[1])

    def PutLabware(
        self,
        HandoverPosition: HandoverPosition,
        IntermediateActions: List[str],
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PutLabware_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.putLabwareUR()

    def GetLabware(
        self,
        HandoverPosition: HandoverPosition,
        IntermediateActions: List[str],
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> GetLabware_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.parent_server.robot_interface.getLabwareUR(HandoverPosition[1])
