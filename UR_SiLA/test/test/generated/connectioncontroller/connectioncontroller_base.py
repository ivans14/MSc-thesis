# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from abc import ABC, abstractmethod
from queue import Queue
from typing import TYPE_CHECKING, Optional, Union

from sila2.server import FeatureImplementationBase, MetadataDict

from .connectioncontroller_types import ConnectToRobot_Responses

if TYPE_CHECKING:
    from ...server import Server


class ConnectionControllerBase(FeatureImplementationBase, ABC):
    parent_server: Server

    _ConnectionStatus_producer_queue: Queue[Union[bool, Exception]]
    _ConnectionStatus_current_value: bool

    def __init__(self, parent_server: Server):
        """
            The Connection Controller feature provides a command to trigger
        the connection to a UR Robot via socket connection.
        If the connection has already been established a SocketInUse error will be raised

        """
        super().__init__(parent_server=parent_server)
        self._ConnectionStatus_current_value = bool
        self._ConnectionStatus_producer_queue = Queue()

    def update_ConnectionStatus(self, ConnectionStatus: bool, queue: Optional[Queue[bool]] = None) -> None:
        """
        Gets the connection status of the UR Robot

        This method updates the observable property 'ConnectionStatus'.

        :param queue: The queue to send updates to. If None, the default Queue will be used.
        """
        if queue is None:
            if self._ConnectionStatus_current_value == True and ConnectionStatus == False:
                print("lost connection to the robot")
            queue = self._ConnectionStatus_producer_queue
            self._ConnectionStatus_current_value = ConnectionStatus            
        queue.put(ConnectionStatus)

    def ConnectionStatus_on_subscription(self, *, metadata: MetadataDict) -> Optional[Queue[bool]]:
        """
        Gets the connection status of the UR Robot

        This method is called when a client subscribes to the observable property 'ConnectionStatus'

        :param metadata: The SiLA Client Metadata attached to the call
        :return: Optional `Queue` that should be used for updating this property.
            If None, the default Queue will be used.
        """
        pass

    def abort_ConnectionStatus_subscriptions(self, error: Exception, queue: Optional[Queue[bool]] = None) -> None:
        """
        Gets the connection status of the UR Robot

        This method aborts subscriptions to the observable property 'ConnectionStatus'.

        :param error: The Exception to be sent to the subscribing client.
            If it is no DefinedExecutionError or UndefinedExecutionError, it will be wrapped in an UndefinedExecutionError.
        :param queue: The queue to abort. If None, the default Queue will be used.
        """
        if queue is None:
            queue = self._ConnectionStatus_producer_queue
        queue.put(error)

    @property
    def current_ConnectionStatus(self) -> bool:
        try:
            return self._ConnectionStatus_current_value
        except AttributeError:
            raise AttributeError("Observable property ConnectionStatus has never been set")

    @abstractmethod
    def ConnectToRobot(self, *, metadata: MetadataDict) -> ConnectToRobot_Responses:
        """
        Try to establish a socket connection to the UR Robot


        :param metadata: The SiLA Client Metadata attached to the call

        :return:

            - Status: The status of the connection


        """
        pass
