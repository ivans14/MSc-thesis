# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict


from ..generated.connectioncontroller import ConnectionControllerBase, ConnectToRobot_Responses

if TYPE_CHECKING:
    from ..server import Server

# class ConnectionControllerShutdown():
#     def __init__(self, parent_server: Server) -> None:
#         self.values = [bool,bool]
#     def periodic_func(self):
#         check_conn = self.parent_server.robot_interface.check_connection
#         self.values[-1] = self.values[-2]
#         self.values[-1] = check_conn()
#         if self.values[-1] == False and self.values[-2] == True:
#             self.parent_server.stop() 
#         return check_conn()

class ConnectionControllerImpl(ConnectionControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)
        check_conn = self.parent_server.robot_interface.check_connection
        # Shutdown = ConnectionControllerShutdown(parent_server=parent_server)

        self.run_periodically(
            lambda: self.update_ConnectionStatus(check_conn()),
            delay_seconds=1
        )




    def ConnectToRobot(self, *, metadata: MetadataDict) -> ConnectToRobot_Responses:
        print("connecting to rob")
        connect_response = self.parent_server.robot_interface.connect()
        return ConnectToRobot_Responses(connect_response)
