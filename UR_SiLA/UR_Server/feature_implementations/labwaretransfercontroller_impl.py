# Generated by sila2.code_generator; sila2.__version__: 0.7.3
from __future__ import annotations

from typing import TYPE_CHECKING, List

from sila2.server import MetadataDict, ObservableCommandInstance
from demo_server.hardware_interface import RobotInterface

from ..generated.labwaretransfercontroller import (
    GetLabware_Responses,
    HandoverPosition,
    LabwareDelivered_Responses,
    LabwareRemoved_Responses,
    LabwareTransferControllerBase,
    PositionIndex,
    PrepareForInput_Responses,
    PrepareForOutput_Responses,
    PutLabware_Responses,
)

if TYPE_CHECKING:
    from ..server import Server


class LabwareTransferControllerImpl(LabwareTransferControllerBase):
    def __init__(self, parent_server: Server, hardware_interface: RobotInterface) -> None:
        self.interface = hardware_interface
        super().__init__(parent_server=parent_server)

    def get_AvailableIntermediateActions(self, *, metadata: MetadataDict) -> List[str]:
        raise NotImplementedError  # TODO

    def PrepareForInput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        LabwareType: str,
        LabwareUniqueID: str,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForInput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        raise NotImplementedError  # TODO

    def PrepareForOutput(
        self,
        HandoverPosition: HandoverPosition,
        InternalPosition: PositionIndex,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PrepareForOutput_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        raise NotImplementedError  # TODO

    def PutLabware(
        self,
        HandoverPosition: HandoverPosition,
        LabwareType: str,
        IntermediateActions: List[str],
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> PutLabware_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        self.interface.place(HandoverPosition)

    def GetLabware(
        self,
        HandoverPosition: HandoverPosition,
        LabwareType: str,
        IntermediateActions: List[str],
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstance,
    ) -> GetLabware_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        print(HandoverPosition)
        self.interface.pick((HandoverPosition.Position, HandoverPosition.SubPosition))

    def LabwareDelivered(
        self, HandoverPosition: HandoverPosition, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> LabwareDelivered_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        raise NotImplementedError  # TODO

    def LabwareRemoved(
        self, HandoverPosition: HandoverPosition, *, metadata: MetadataDict, instance: ObservableCommandInstance
    ) -> LabwareRemoved_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        raise NotImplementedError  # TODO
