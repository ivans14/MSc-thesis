# Generated by sila2.code_generator; sila2.__version__: 0.10.1
from __future__ import annotations

from typing import TYPE_CHECKING

from sila2.server import MetadataDict, ObservableCommandInstanceWithIntermediateResponses

from ..generated.robotcontroller import (
    ConfigureProgram_IntermediateResponses,
    ConfigureProgram_Responses,
    ConnectToRobot_Responses,
    InvalidParameters,
    RobotControllerBase,
)
from ..UR_utils.UR_Arm import UR_Robot

import time

if TYPE_CHECKING:
    from ..server import Server


class RobotControllerImpl(RobotControllerBase):
    def __init__(self, parent_server: Server) -> None:
        super().__init__(parent_server=parent_server)

    def ConnectToRobot(self, Ip: str, *, metadata: MetadataDict) -> ConnectToRobot_Responses:
        self.robot_interface = UR_Robot(Ip)
        
        return ConnectToRobot_Responses(self.robot_interface.connect())
    def ConfigureProgram(
        self,
        SyrSamp: int,
        SyrBatch: int,
        LPenSamp: int,
        LPenBatch: int,
        SPenSamp: int,
        SPenBatch: int,
        *,
        metadata: MetadataDict,
        instance: ObservableCommandInstanceWithIntermediateResponses[ConfigureProgram_IntermediateResponses],
    ) -> ConfigureProgram_Responses:
        instance.begin_execution()  # set execution status from `waiting` to `running`
        response = self.robot_interface.configure_robot_params(SyrSamp, SyrBatch,
        LPenSamp, LPenBatch, SPenSamp, SPenBatch)
        if response == False:
            raise InvalidParameters
        instance.send_intermediate_response(ConfigureProgram_IntermediateResponses("starting large tray loop"))
        time.sleep(2)
        self.robot_interface.go_home()
        self.robot_interface.Ltray_loop()
        self.robot_interface.go_home()
        instance.send_intermediate_response(ConfigureProgram_IntermediateResponses("starting small tray loop"))
        time.sleep(2)
        # self.robot_interface.Stray_loop()
        return ConfigureProgram_Responses("program finished successfully")

